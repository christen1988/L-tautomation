      
      
      
      #include <Servo.h>
#include <Stepper.h>

// Constants for servo and stepper motor pins
const int servoPin = 9;
const int stepperMotorPin1 = 10;
const int stepperMotorPin2 = 11;
const int stepperMotorPin3 = 12;
const int stepperMotorPin4 = 13;

// Create servo and stepper motor objects
Servo servo;
Stepper stepper(2048, stepperMotorPin1, stepperMotorPin3, stepperMotorPin2, stepperMotorPin4);

// Other constants
const int buttonPin = 2;
const int relayPin = 3;
const int ledPin = 4;
const int potentiometer1Pin = A0;
const int potentiometer2Pin = A1;
const int motorStopDelay = 1000;
const int buttonHoldTime = 5000;

// Variables
int buttonState = HIGH;
int lastButtonState = HIGH;
int state = 0;
int nextState = 0;
bool isPaused = false;
unsigned long pauseStartTime = 0;

void setup() {
  // Set pin modes
  pinMode(buttonPin, INPUT_PULLUP);
  pinMode(relayPin, OUTPUT);
  pinMode(ledPin, OUTPUT);

  // Attach servo
  servo.attach(servoPin);

  // Set stepper motor speed based on potentiometer 1
  int motorSpeed = map(analogRead(potentiometer1Pin), 0, 1023, 10, 100);
  stepper.setSpeed(motorSpeed);
}

void loop() {
  buttonState = digitalRead(buttonPin);

  if (buttonState != lastButtonState) {
    if (buttonState == LOW) {
      if (isPaused) {
        unsigned long buttonHoldDuration = millis() - pauseStartTime;
        if (buttonHoldDuration >= buttonHoldTime) {
          nextState = 6; // End the cycle immediately
        } else {
          isPaused = false; // Resume the cycle
        }
      } else {
        nextState = (state + 1) % 7;
      }
    }
    lastButtonState = buttonState;
  }

  if (!isPaused) {
    switch (nextState) {
      case 0:
        // Open relay
        digitalWrite(relayPin, HIGH);
        nextState = 1;
        break;

      case 1:
        // Turn on LED for 10 seconds
        digitalWrite(ledPin, HIGH);
        delay(10000);
        digitalWrite(ledPin, LOW);
        nextState = 2;
        break;

      case 2:
        // Rotate servo
        servo.write(90);
        nextState = 3;
        break;

      case 3:
        // Rotate stepper motor based on potentiometer 1 speed
        int motorSpeed = map(analogRead(potentiometer1Pin), 0, 1023, 10, 100);
        stepper.setSpeed(motorSpeed);
        stepper.step(2048);
        nextState = 4;
        break;

      case 4:
        // Wait for potentiometer 2 time
        int motorDelay = map(analogRead(potentiometer2Pin), 0, 1023, 0, 10000);
        delay(motorDelay);
        nextState = 5;
        break;

      case 5:
        // Stop stepper motor and prepare for relay closing
        stepper.step(0);
        nextState = 6;
        break;

      case 6:
        // Close relay
        digitalWrite(relayPin, LOW);
        nextState = 7;
        break;
      
      case 7:
        // Rotate servo back to initial position
        servo.write(0);
        nextState = 0;
        break;
    }

    // Check if the cycle has ended
    if (nextState == 0) {
      isPaused = true;
      pauseStartTime = millis();
    }

    // Check if the cycle should end immediately
    if (nextState == 6 && nextState != state) {
      isPaused = false;
    }

    state = nextState;
  }
}
